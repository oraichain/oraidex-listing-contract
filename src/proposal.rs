// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `src/proposal.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

///  Coin defines a token with a denomination and an amount.
///
///  NOTE: The amount field is an Int which implements the custom method
///  signatures required by gogoproto.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:Coin)
pub struct Coin {
    // message fields
    // @@protoc_insertion_point(field:Coin.denom)
    pub denom: ::std::string::String,
    // @@protoc_insertion_point(field:Coin.amount)
    pub amount: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:Coin.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Coin {
    fn default() -> &'a Coin {
        <Coin as ::protobuf::Message>::default_instance()
    }
}

impl Coin {
    pub fn new() -> Coin {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "denom",
            |m: &Coin| { &m.denom },
            |m: &mut Coin| { &mut m.denom },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "amount",
            |m: &Coin| { &m.amount },
            |m: &mut Coin| { &mut m.amount },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Coin>(
            "Coin",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Coin {
    const NAME: &'static str = "Coin";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.denom = is.read_string()?;
                },
                18 => {
                    self.amount = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.denom.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.denom);
        }
        if !self.amount.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.amount);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.denom.is_empty() {
            os.write_string(1, &self.denom)?;
        }
        if !self.amount.is_empty() {
            os.write_string(2, &self.amount)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Coin {
        Coin::new()
    }

    fn clear(&mut self) {
        self.denom.clear();
        self.amount.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Coin {
        static instance: Coin = Coin {
            denom: ::std::string::String::new(),
            amount: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Coin {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Coin").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Coin {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Coin {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  MsgSubmitProposal defines an sdk.Msg type that supports submitting arbitrary
///  proposal Content.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:MsgSubmitProposal)
pub struct MsgSubmitProposal {
    // message fields
    ///  content is the proposal's content.
    // @@protoc_insertion_point(field:MsgSubmitProposal.content)
    pub content: ::protobuf::MessageField<::protobuf::well_known_types::any::Any>,
    ///  initial_deposit is the deposit value that must be paid at proposal submission.
    // @@protoc_insertion_point(field:MsgSubmitProposal.initial_deposit)
    pub initial_deposit: ::std::vec::Vec<Coin>,
    ///  proposer is the account address of the proposer.
    // @@protoc_insertion_point(field:MsgSubmitProposal.proposer)
    pub proposer: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:MsgSubmitProposal.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgSubmitProposal {
    fn default() -> &'a MsgSubmitProposal {
        <MsgSubmitProposal as ::protobuf::Message>::default_instance()
    }
}

impl MsgSubmitProposal {
    pub fn new() -> MsgSubmitProposal {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::any::Any>(
            "content",
            |m: &MsgSubmitProposal| { &m.content },
            |m: &mut MsgSubmitProposal| { &mut m.content },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "initial_deposit",
            |m: &MsgSubmitProposal| { &m.initial_deposit },
            |m: &mut MsgSubmitProposal| { &mut m.initial_deposit },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "proposer",
            |m: &MsgSubmitProposal| { &m.proposer },
            |m: &mut MsgSubmitProposal| { &mut m.proposer },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgSubmitProposal>(
            "MsgSubmitProposal",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgSubmitProposal {
    const NAME: &'static str = "MsgSubmitProposal";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.content)?;
                },
                18 => {
                    self.initial_deposit.push(is.read_message()?);
                },
                26 => {
                    self.proposer = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.content.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.initial_deposit {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if !self.proposer.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.proposer);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.content.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        for v in &self.initial_deposit {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        if !self.proposer.is_empty() {
            os.write_string(3, &self.proposer)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgSubmitProposal {
        MsgSubmitProposal::new()
    }

    fn clear(&mut self) {
        self.content.clear();
        self.initial_deposit.clear();
        self.proposer.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgSubmitProposal {
        static instance: MsgSubmitProposal = MsgSubmitProposal {
            content: ::protobuf::MessageField::none(),
            initial_deposit: ::std::vec::Vec::new(),
            proposer: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgSubmitProposal {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgSubmitProposal").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgSubmitProposal {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgSubmitProposal {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  MsgSubmitProposalResponse defines the Msg/SubmitProposal response type.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:MsgSubmitProposalResponse)
pub struct MsgSubmitProposalResponse {
    // message fields
    ///  proposal_id defines the unique id of the proposal.
    // @@protoc_insertion_point(field:MsgSubmitProposalResponse.proposal_id)
    pub proposal_id: u64,
    // special fields
    // @@protoc_insertion_point(special_field:MsgSubmitProposalResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgSubmitProposalResponse {
    fn default() -> &'a MsgSubmitProposalResponse {
        <MsgSubmitProposalResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgSubmitProposalResponse {
    pub fn new() -> MsgSubmitProposalResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "proposal_id",
            |m: &MsgSubmitProposalResponse| { &m.proposal_id },
            |m: &mut MsgSubmitProposalResponse| { &mut m.proposal_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgSubmitProposalResponse>(
            "MsgSubmitProposalResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgSubmitProposalResponse {
    const NAME: &'static str = "MsgSubmitProposalResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.proposal_id = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.proposal_id != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.proposal_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.proposal_id != 0 {
            os.write_uint64(1, self.proposal_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgSubmitProposalResponse {
        MsgSubmitProposalResponse::new()
    }

    fn clear(&mut self) {
        self.proposal_id = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgSubmitProposalResponse {
        static instance: MsgSubmitProposalResponse = MsgSubmitProposalResponse {
            proposal_id: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgSubmitProposalResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgSubmitProposalResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgSubmitProposalResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgSubmitProposalResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  TextProposal defines a standard text proposal whose changes need to be
///  manually updated in case of approval.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:TextProposal)
pub struct TextProposal {
    // message fields
    ///  title of the proposal.
    // @@protoc_insertion_point(field:TextProposal.title)
    pub title: ::std::string::String,
    ///  description associated with the proposal.
    // @@protoc_insertion_point(field:TextProposal.description)
    pub description: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:TextProposal.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TextProposal {
    fn default() -> &'a TextProposal {
        <TextProposal as ::protobuf::Message>::default_instance()
    }
}

impl TextProposal {
    pub fn new() -> TextProposal {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "title",
            |m: &TextProposal| { &m.title },
            |m: &mut TextProposal| { &mut m.title },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "description",
            |m: &TextProposal| { &m.description },
            |m: &mut TextProposal| { &mut m.description },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TextProposal>(
            "TextProposal",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TextProposal {
    const NAME: &'static str = "TextProposal";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.title = is.read_string()?;
                },
                18 => {
                    self.description = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.title.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.title);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.description);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.title.is_empty() {
            os.write_string(1, &self.title)?;
        }
        if !self.description.is_empty() {
            os.write_string(2, &self.description)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TextProposal {
        TextProposal::new()
    }

    fn clear(&mut self) {
        self.title.clear();
        self.description.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TextProposal {
        static instance: TextProposal = TextProposal {
            title: ::std::string::String::new(),
            description: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TextProposal {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TextProposal").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TextProposal {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TextProposal {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x12src/proposal.proto\x1a\x19google/protobuf/any.proto\"4\n\x04Coin\
    \x12\x14\n\x05denom\x18\x01\x20\x01(\tR\x05denom\x12\x16\n\x06amount\x18\
    \x02\x20\x01(\tR\x06amount\"\x8f\x01\n\x11MsgSubmitProposal\x12.\n\x07co\
    ntent\x18\x01\x20\x01(\x0b2\x14.google.protobuf.AnyR\x07content\x12.\n\
    \x0finitial_deposit\x18\x02\x20\x03(\x0b2\x05.CoinR\x0einitialDeposit\
    \x12\x1a\n\x08proposer\x18\x03\x20\x01(\tR\x08proposer\"<\n\x19MsgSubmit\
    ProposalResponse\x12\x1f\n\x0bproposal_id\x18\x01\x20\x01(\x04R\nproposa\
    lId\"F\n\x0cTextProposal\x12\x14\n\x05title\x18\x01\x20\x01(\tR\x05title\
    \x12\x20\n\x0bdescription\x18\x02\x20\x01(\tR\x0bdescriptionJ\x9a\x0b\n\
    \x06\x12\x04\0\0(\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\t\n\x02\x03\0\
    \x12\x03\x01\x07\"\n\xaf\x01\n\x02\x04\0\x12\x04\x07\0\n\x01\x1a\xa2\x01\
    \x20Coin\x20defines\x20a\x20token\x20with\x20a\x20denomination\x20and\
    \x20an\x20amount.\n\n\x20NOTE:\x20The\x20amount\x20field\x20is\x20an\x20\
    Int\x20which\x20implements\x20the\x20custom\x20method\n\x20signatures\
    \x20required\x20by\x20gogoproto.\n\n\n\n\x03\x04\0\x01\x12\x03\x07\x08\
    \x0c\n\x0b\n\x04\x04\0\x02\0\x12\x03\x08\x02\x14\n\r\n\x05\x04\0\x02\0\
    \x04\x12\x04\x08\x02\x07\x0e\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x08\x02\
    \x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x08\t\x0e\n\x0c\n\x05\x04\0\x02\
    \0\x03\x12\x03\x08\x12\x13\n\x0b\n\x04\x04\0\x02\x01\x12\x03\t\x02\x14\n\
    \r\n\x05\x04\0\x02\x01\x04\x12\x04\t\x02\x08\x14\n\x0c\n\x05\x04\0\x02\
    \x01\x05\x12\x03\t\x02\x08\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\t\t\x0f\
    \n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\t\x12\x13\nm\n\x02\x04\x01\x12\
    \x04\x0e\0\x17\x01\x1aa\x20MsgSubmitProposal\x20defines\x20an\x20sdk.Msg\
    \x20type\x20that\x20supports\x20submitting\x20arbitrary\n\x20proposal\
    \x20Content.\n\n\n\n\x03\x04\x01\x01\x12\x03\x0e\x08\x19\n1\n\x04\x04\
    \x01\x02\0\x12\x03\x10\x02\"\x1a$\x20content\x20is\x20the\x20proposal's\
    \x20content.\n\n\r\n\x05\x04\x01\x02\0\x04\x12\x04\x10\x02\x0e\x1b\n\x0c\
    \n\x05\x04\x01\x02\0\x06\x12\x03\x10\x02\x15\n\x0c\n\x05\x04\x01\x02\0\
    \x01\x12\x03\x10\x16\x1d\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x10\x20!\
    \n]\n\x04\x04\x01\x02\x01\x12\x03\x13\x02$\x1aP\x20initial_deposit\x20is\
    \x20the\x20deposit\x20value\x20that\x20must\x20be\x20paid\x20at\x20propo\
    sal\x20submission.\n\n\x0c\n\x05\x04\x01\x02\x01\x04\x12\x03\x13\x02\n\n\
    \x0c\n\x05\x04\x01\x02\x01\x06\x12\x03\x13\x0b\x0f\n\x0c\n\x05\x04\x01\
    \x02\x01\x01\x12\x03\x13\x10\x1f\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\
    \x13\"#\n?\n\x04\x04\x01\x02\x02\x12\x03\x16\x02\x16\x1a2\x20proposer\
    \x20is\x20the\x20account\x20address\x20of\x20the\x20proposer.\n\n\r\n\
    \x05\x04\x01\x02\x02\x04\x12\x04\x16\x02\x13$\n\x0c\n\x05\x04\x01\x02\
    \x02\x05\x12\x03\x16\x02\x08\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03\x16\
    \t\x11\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03\x16\x14\x15\nU\n\x02\x04\
    \x02\x12\x04\x1a\0\x1d\x01\x1aI\x20MsgSubmitProposalResponse\x20defines\
    \x20the\x20Msg/SubmitProposal\x20response\x20type.\n\n\n\n\x03\x04\x02\
    \x01\x12\x03\x1a\x08!\nA\n\x04\x04\x02\x02\0\x12\x03\x1c\x02\x19\x1a4\
    \x20proposal_id\x20defines\x20the\x20unique\x20id\x20of\x20the\x20propos\
    al.\n\n\r\n\x05\x04\x02\x02\0\x04\x12\x04\x1c\x02\x1a#\n\x0c\n\x05\x04\
    \x02\x02\0\x05\x12\x03\x1c\x02\x08\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\
    \x1c\t\x14\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x1c\x17\x18\n{\n\x02\
    \x04\x03\x12\x04!\0(\x01\x1ao\x20TextProposal\x20defines\x20a\x20standar\
    d\x20text\x20proposal\x20whose\x20changes\x20need\x20to\x20be\n\x20manua\
    lly\x20updated\x20in\x20case\x20of\x20approval.\n\n\n\n\x03\x04\x03\x01\
    \x12\x03!\x08\x14\n%\n\x04\x04\x03\x02\0\x12\x03$\x02\x13\x1a\x18\x20tit\
    le\x20of\x20the\x20proposal.\n\n\r\n\x05\x04\x03\x02\0\x04\x12\x04$\x02!\
    \x16\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x03$\x02\x08\n\x0c\n\x05\x04\x03\
    \x02\0\x01\x12\x03$\t\x0e\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03$\x11\x12\
    \n8\n\x04\x04\x03\x02\x01\x12\x03'\x02\x19\x1a+\x20description\x20associ\
    ated\x20with\x20the\x20proposal.\n\n\r\n\x05\x04\x03\x02\x01\x04\x12\x04\
    '\x02$\x13\n\x0c\n\x05\x04\x03\x02\x01\x05\x12\x03'\x02\x08\n\x0c\n\x05\
    \x04\x03\x02\x01\x01\x12\x03'\t\x14\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\
    \x03'\x17\x18b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(::protobuf::well_known_types::any::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(4);
            messages.push(Coin::generated_message_descriptor_data());
            messages.push(MsgSubmitProposal::generated_message_descriptor_data());
            messages.push(MsgSubmitProposalResponse::generated_message_descriptor_data());
            messages.push(TextProposal::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
